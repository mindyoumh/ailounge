from django.conf import settings
import os
import time
from google import genai
from typing import List
from google.genai.errors import ServerError


class TicketClassifierUsingGemini:
    """
    A class to classify support tickets using the Gemini generative AI model via Google GenAI API.

    This class loads a system prompt from a file and uses it together with ticket details to
    generate classification or analysis output from the Gemini model.
    """

    def __init__(self):
        """
        Initializes the TicketClassifierUsingGemini instance.

        Reads the API key and model name from environment variables, validates presence
        of the API key, initializes the GenAI client, and loads the system prompt.
        """
        self.api_key = os.getenv("API_KEY")
        self.model_name = os.getenv("MODEL_NAME")
        if not self.api_key:
            raise ValueError("API_KEY not found in environment variables")

        self.client = genai.Client(api_key=self.api_key)
        self.prompt = self._load_prompt()

    def _load_prompt(self) -> str:
        """
        Loads the system prompt text from a local file "prompt/system_prompt.txt".

        Returns:
            str: The content of the system prompt file.
        """
        prompt_path = os.path.join(settings.BASE_DIR, "prompt", "system_prompt.txt")
        with open(prompt_path, "r", encoding="utf-8") as f:
            return f.read()

    def classify_tickets(self, tickets: List[str]):
        """
        Generates a classification or analysis response for a single support ticket.

        Combines the loaded system prompt with the ticket's details and sends it to the
        Gemini generative AI model for processing.

        Returns:
            str: The text response generated by the Gemini model.
        """
        max_retries = 5
        delay_seconds = 30
        for attempt in range(max_retries):
            try:
                full_prompt = self.prompt
                for ticket in tickets:
                    ticket_details = f"""
                        Ticket ID: {ticket[0]}
                        Subject: {ticket[1]}
                        Description: {ticket[2]}
                        Resolution: {ticket[3]}
                        """
                    full_prompt += "\n\n" + ticket_details

                response = self.client.models.generate_content(
                    model=self.model_name, contents=[full_prompt]
                )
                return response.text
            except ServerError as e:
                print(
                    f"🚨 Gemini ServerError (Attempt {attempt + 1}/{max_retries}): {e}"
                )
                if attempt < max_retries - 1:
                    print(f"⏳ Waiting {delay_seconds} seconds before retrying...")
                    time.sleep(delay_seconds)
                else:
                    print("❌ Max retries reached. Raising error.")
                    raise

    def count_token(self, prompt: str) -> int:
        q = self.client.models.count_tokens(model=self.model_name, contents=prompt)
        print(q)
        return q.total_tokens
